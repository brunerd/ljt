#!/usr/bin/env bash
#!/usr/bin/env zsh
#choose your shell with the first line, works in either

: <<-LICENSE_BLOCK
ljt - Little JSON Tool (https://github.com/brunerd/ljt) Copyright (c) 2022 Joel Bruner (https://github.com/brunerd)
Licensed under the MIT License. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
LICENSE_BLOCK

#v1.0.0 - copy the function below to embed ljt into your shell script, ljt.min a minified version is also available
function ljt () (
	read -r -d '' JSCode <<-'EOT'
	try { 
		//get arguments preserving Unicode
		var query = decodeURIComponent(escape(arguments[0]));var file = decodeURIComponent(escape(arguments[1]));
		//convert JSON Pointer to bracket style JS notation
		if (query[0]==='/'){ query = query.split('/').slice(1).map(function (f){return "["+JSON.stringify(f)+"]"}).join('')}
		//reverse query, toss strings, look for disallowed characters, function invocation is prohibited
		else if(/[^A-Za-z_$\d\.\[\]'"]/.test(query.split('').reverse().join('').replace(/(["'])(.*?)\1(?!\\)/g, ""))){ throw new Error("Invalid path: " + query);};
		//if JSONPath query string, lop off $ for eval 
		if(query[0]==="$"){query=query.slice(1,query.length)};
		//get data with readFile() and parse JSON
		var data = JSON.parse(readFile(file));
		//use eval to get the result
		var result = eval("(data)"+query); 
	} 
	//catch any errors, print error and quit
	catch(e){
		printErr(e);
		quit();
	}

	//return value or alert via stderr
	if (result !== undefined) { 
		result !== null && result.constructor === String ? print(result) : print(JSON.stringify(result,null,2))
	}
	else {
		printErr("Path not found.")
	}
	EOT

	#our two optional arguments
	queryArg="${1}"; fileArg="${2}"; 
	#jsc changed location in 10.15, or perhaps this some other *nix
	jsc=$(find "/System/Library/Frameworks/JavaScriptCore.framework/Versions/Current/" -name 'jsc');[ -z "${jsc}" ] && jsc=$(which jsc);
	#allow query to be optional
	[ -f "${queryArg}" -a -z "${fileArg}" ] && fileArg="${queryArg}" && unset queryArg;
	#get input via file or file redirection, capture stderr to a variable
	if [ -f "${fileArg:=/dev/stdin}" ]; then { errOut=$( { { "${jsc}" -e "${JSCode}" -- "${queryArg}" "${fileArg}"; } 1>&3 ; } 2>&1); } 3>&1;
	#otherwise use cat for piped input
	else { errOut=$( { { "${jsc}" -e "${JSCode}" -- "${queryArg}" "/dev/stdin" <<< "$(cat)"; } 1>&3 ; } 2>&1); } 3>&1; fi;
	#print any error output and exit non-zero
	[ -n "${errOut}" ] && /bin/echo "$errOut" >&2 && return 1;
)

# Usage: ljt [query] [filepath]
# [query] is optional and can be JSONPath (with or without $) or JSON Pointer
# [filepath] is optional, input can also be via file redirection, piped input, here doc, or here strings

ljt "$@" 
exit $?
